if !exists('g:lspconfig')
  finish
endif

lua << EOF
--vim.lsp.set_log_level("debug")
EOF



lua << EOF
local nvim_diagnostic = require('lspconfig')
local protocol = require('vim.lsp.protocol')

-- Use an on_attach function to only map the following keys 
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

   -- Mappings.
  local opts = { noremap=true, silent=true }

  
  buf_set_keymap('n', 'gr', '<cmd>lua nvim_diagnostic.buf.references()<CR>', opts)
  buf_set_keymap('n', 'gD', '<Cmd>lua nvim_diagnostic.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua nvim_diagnostic.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua nvim_diagnostic.buf.definition()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua nvim_diagnostic.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '<C-j>', '<cmd>lua nvim_diagnostic.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua nvim_diagnostic.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<S-C-j>', '<cmd>lua nvim_diagnostic.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua nvim_diagnostic.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap("n", "<space>f", "<cmd>lua nvim_diagnostic.buf.formatting()<CR>", opts)
   
  -- formatting
  if client.name == 'tsserver' then
    client.resolved_capabilities.document_formatting = false
  end
  
  if client.resolved_capabilities.document_formatting then
    vim.api.nvim_command [[augroup Format]]
    vim.api.nvim_command [[autocmd! * <buffer>]]
    vim.api.nvim_command [[autocmd BufWritePre <buffer> lua nvim_diagnostic.buf.formatting_seq_sync()]]
    vim.api.nvim_command [[augroup END]]   
  end
 
end



-- Set up completion using nvim_cmp with LSP source

nvim_diagnostic.flow.setup {
  on_attach = on_attach,
  capabilities = capabilities
}
-- Set up completion using nvim_cmp with LSP source


nvim_diagnostic.tsserver.setup {
  on_attach = on_attach,
  filetypes = {"typescript", "typescriptreact", "typescript.tsx" }
}
EOF
